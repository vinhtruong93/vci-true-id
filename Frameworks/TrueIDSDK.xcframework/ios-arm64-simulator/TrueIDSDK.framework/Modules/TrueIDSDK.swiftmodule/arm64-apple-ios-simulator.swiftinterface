// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TrueIDSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CommonCrypto
import CoreLocation
import CoreNFC
import CryptoKit
import CryptoTokenKit
import DeveloperToolsSupport
import FaceTecSDK
import FaceTrueIDSDK
import Foundation
import IDCardReaderLite
import OpenSSL
import Swift
import SwiftUI
@_exported import TrueIDSDK
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case error
  case none
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [TrueIDSDK.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [TrueIDSDK.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: TrueIDSDK.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
@objc public class CheckingRecord : ObjectiveC.NSObject {
  @objc public var name: Swift.String
  @objc public var message: Swift.String
  @objc public var type: TrueIDSDK.DetectionType
  @objc public var status: Swift.Bool
  public init(name: Swift.String, message: Swift.String, type: TrueIDSDK.DetectionType, status: Swift.Bool)
  public func toMap() -> [Swift.String : Any]
  @objc deinit
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName: TrueIDSDK.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: TrueIDSDK.CardAccess, tagReader: TrueIDSDK.TagReader) throws
  #if compiler(>=5.3) && $AsyncAwait
  public func doPACE(mrzKey: Swift.String) async throws
  #endif
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : TrueIDSDK.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: TrueIDSDK.PACEMappingType, b: TrueIDSDK.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : TrueIDSDK.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> TrueIDSDK.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> TrueIDSDK.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class NfcInfo : ObjectiveC.NSObject {
  @objc public var idNumber: Swift.String
  @objc public var gender: Swift.String
  @objc public var dob: Swift.String
  @objc public var fullname: Swift.String
  @objc public var address: Swift.String
  @objc public var doi: Swift.String
  @objc public var givenPlace: Swift.String
  @objc public var origin: Swift.String
  @objc public var dueDate: Swift.String
  @objc public var photo: Swift.String
  @objc public var mrz: Swift.String
  @objc override dynamic public init()
  public init(idNumber: Swift.String, gender: Swift.String, dob: Swift.String, fullname: Swift.String, address: Swift.String, doi: Swift.String, givenPlace: Swift.String, origin: Swift.String, dueDate: Swift.String)
  public func toMap() -> [Swift.String : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class NfcResult : ObjectiveC.NSObject {
  @objc public var nfcInfo: TrueIDSDK.NfcRarInfo
  @objc public var code: Foundation.NSNumber
  @objc public var errorMesssage: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class NfcRarInfo : ObjectiveC.NSObject {
  @objc public var faceImage: Swift.String
  @objc public var cardNumber: Swift.String
  @objc public var dateOfBirth: Swift.String
  @objc public var issueDate: Swift.String
  @objc public var previousNumber: Swift.String
  @objc public var name: Swift.String
  @objc public var sex: Swift.String
  @objc public var nationality: Swift.String
  @objc public var nation: Swift.String
  @objc public var religion: Swift.String
  @objc public var hometown: Swift.String
  @objc public var address: Swift.String
  @objc public var character: Swift.String
  @objc public var expiredDate: Swift.String
  @objc public var fatherName: Swift.String
  @objc public var motherName: Swift.String
  @objc public var mrz: Swift.String
  @objc override dynamic public init()
  public init(faceImage: Swift.String, cardNumber: Swift.String, dateOfBirth: Swift.String, issueDate: Swift.String, previousNumber: Swift.String, name: Swift.String, sex: Swift.String, nationality: Swift.String, nation: Swift.String, religion: Swift.String, hometown: Swift.String, address: Swift.String, character: Swift.String, expiredDate: Swift.String, fatherName: Swift.String, motherName: Swift.String, mrz: Swift.String)
  public func toMap() -> [Swift.String : Any]
  @objc deinit
}
@objc public class ConfigInfo : ObjectiveC.NSObject {
  @objc public var domain: Swift.String
  public var configEndPoint: TrueIDSDK.ConfigEndPoint
  @objc public var appId: Swift.String
  @objc public var appSecret: Swift.String
  @objc public var zoomLicenseKey: Swift.String
  @objc public var zoomServerBaseURL: Swift.String
  @objc public var zoomPublicKey: Swift.String
  @objc public var zoomAuthURL: Swift.String
  @objc public var zoomClient: Swift.String
  @objc public var accessToken: Swift.String
  @objc public var configHeader: Swift.String
  @objc public init(domain: Swift.String, configEndPoint: TrueIDSDK.ConfigEndPoint, appId: Swift.String, appSecret: Swift.String, zoomLicenseKey: Swift.String, zoomServerBaseURL: Swift.String, zoomPublicKey: Swift.String, zoomAuthURL: Swift.String, zoomClient: Swift.String, accessToken: Swift.String, configHeader: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ConfigEndPoint : ObjectiveC.NSObject {
  @objc public var front: Swift.String
  @objc public var back: Swift.String
  @objc public var selfie: Swift.String
  @objc public var complete: Swift.String
  @objc public var nfcqrverify: Swift.String
  @objc public var nfcrar: Swift.String
  @objc public var ocr: Swift.String
  @objc public var nfcbshield: Swift.String
  @objc public var createrequest: Swift.String
  @objc public var accesstoken: Swift.String
  public init(front: Swift.String, back: Swift.String, selfie: Swift.String, complete: Swift.String, nfcqrverify: Swift.String, nfcrar: Swift.String, ocr: Swift.String, nfcbshield: Swift.String, createrequest: Swift.String, accesstoken: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class EID : ObjectiveC.NSObject {
  @objc public var eidQRText: Swift.String
  @objc public var eidMRZ: Swift.String
  public init(eidQRText: Swift.String, eidMRZ: Swift.String)
  public func toMap() -> [Swift.String : Any]
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> TrueIDSDK.ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> TrueIDSDK.ASN1Item
  public func test()
  @objc deinit
}
@objc public enum NFCStatus : Swift.Int {
  case ignored = 0
  case success = 1
  case fakeDetected = 2
  case decryptionFailed = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class VerificationResult : ObjectiveC.NSObject {
  @objc public var code: Foundation.NSNumber
  @objc public var errorMessage: Swift.String
  @objc public var clientId: Swift.String?
  @objc public var requestId: Swift.String?
  @objc public var decision: TrueIDSDK.Decision?
  @objc public var faceMatching: TrueIDSDK.FaceMatching?
  @objc public var idInfo: TrueIDSDK.Person?
  @objc public var nfcInfo: TrueIDSDK.NfcInfo?
  @objc public var nfcRarInfo: TrueIDSDK.NfcRarInfo?
  @objc public var livenessCheck: Swift.Bool
  @objc public var nfcStatus: TrueIDSDK.NFCStatus
  @objc public var rawImage: TrueIDSDK.RawImage?
  @objc public var ekycResult: [Swift.String : Any]?
  @objc public func toMap() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Decision : ObjectiveC.NSObject {
  @objc public var code: Foundation.NSNumber?
  @objc public var decision: Swift.String?
  @objc public func toMap() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class FaceMatching : ObjectiveC.NSObject {
  public var matched: Swift.Bool?
  @objc public var stringValue: [Swift.String : Any]?
  @objc public var similarity: Foundation.NSNumber?
  @objc public var confidenceLevel: Foundation.NSNumber?
  @objc public func toMap() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RawImage : ObjectiveC.NSObject {
  @objc public var front: Swift.String?
  @objc public var back: Swift.String?
  @objc public var selfie: Swift.String?
  @objc public func toMap() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : TrueIDSDK.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@objc(MRZParser) open class MRZParser : ObjectiveC.NSObject {
  @objc public var parsedMRZ: Swift.String
  @objc public init(scan: Swift.String, debug: Swift.Bool = false)
  @objc public func data() -> Swift.Dictionary<Swift.String, Any>
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@objc @_inheritsConvenienceInitializers @objcMembers public class KeyChainStore : ObjectiveC.NSObject {
  @objc public class func string(forKey: Swift.String? = nil) -> Swift.String?
  @objc public class func set(string: Swift.String?, forKey: Swift.String? = nil)
  public class func set<E>(object: E?, forKey: Swift.String? = nil) where E : Swift.Encodable
  public class func get<E>(withType: E.Type, forKey: Swift.String? = nil) -> E? where E : Swift.Decodable
  @objc public class func remove(forKey: Swift.String? = nil)
  @objc public class func data(forKey: Swift.String?) -> Foundation.Data?
  @objc public class func set(data: Foundation.Data?, forKey: Swift.String?)
  @objc public class func removeAllItems()
  @objc override dynamic public init()
  @objc deinit
}
extension TrueIDSDK.KeyChainStore {
  @objc dynamic public class func migrateData()
}
extension TrueIDSDK.KeyChainStore {
  @objc dynamic public class func testMigrate()
}
@objc public class ConfigUI : ObjectiveC.NSObject {
  @objc public var primaryColor: Swift.String
  @objc public var secondaryColor: Swift.String
  @objc public var titleColor: Swift.String
  @objc public var backgroundColor: Swift.String
  @objc public var textColor: Swift.String
  @objc public var textButtonColor: Swift.String
  @objc public var borderInputColor: Swift.String
  @objc public var errorColor: Swift.String
  @objc public var closeColor: Swift.String
  @objc public var stepBarColor: Swift.String
  @objc public var stepBarBackgroundColor: Swift.String
  @objc public var fontName: Swift.String
  @objc public var borderRadius: Swift.Int
  @objc public var defaultSpacing: Swift.Int
  @objc public var imageConfirmation: Swift.Bool
  @objc public var livenessType: Swift.String
  @objc public var stepVerification: [Swift.String]
  @objc public var allowEditOcr: Swift.Bool
  @objc public var isShowStepBar: Swift.Bool
  @objc public var idGuide: Swift.Bool
  @objc public var isDisableSecurity: Swift.Bool
  @objc public var hasInstroctions: Swift.Bool
  @objc public var isManualSelfie: Swift.Bool
  @objc public var isShowSkipNFC: Swift.Bool
  @objc public var trueidWatermark: Swift.Bool
  @objc public var positionBackInitCamera: Swift.Bool
  @objc public var outerBackgroundColorFaceTec: Swift.String
  @objc public var frameColorFaceTec: Swift.String
  @objc public var borderColorFaceTec: Swift.String
  @objc public var ovalColorFaceTec: Swift.String
  @objc public var dualSpinnerColorFaceTec: Swift.String
  @objc public var textColorFaceTec: Swift.String
  @objc public var buttonAndFeedbackBarColorFaceTec: Swift.String
  @objc public var buttonAndFeedbackBarTextColorFaceTec: Swift.String
  @objc public var buttonColorPressedFaceTec: Swift.String
  @objc public var maxRetry: Swift.Int
  @objc public var maxRetryFront: Swift.Int
  @objc public var maxRetryBack: Swift.Int
  @objc public var maxRetrySelfie: Swift.Int
  @objc public var maxRetryNFC: Swift.Int
  @objc convenience public init(jsonString: Swift.String)
  @objc public init(primaryColor: Swift.String, secondaryColor: Swift.String, titleColor: Swift.String, backgroundColor: Swift.String, textColor: Swift.String, textButtonColor: Swift.String, borderInputColor: Swift.String, errorColor: Swift.String, closeColor: Swift.String, stepBarColor: Swift.String, stepBarBackgroundColor: Swift.String, fontName: Swift.String, borderRadius: Swift.Int, defaultSpacing: Swift.Int, maxRetry: Swift.Int, maxRetryFront: Swift.Int, maxRetryBack: Swift.Int, maxRetrySelfie: Swift.Int, maxRetryNFC: Swift.Int, livenessType: Swift.String, imageConfirmation: Swift.Bool, trueidWatermark: Swift.Bool, allowEditOcr: Swift.Bool, isShowStepBar: Swift.Bool, idGuide: Swift.Bool, hasInstroctions: Swift.Bool, isManualSelfie: Swift.Bool, isShowSkipNFC: Swift.Bool, positionBackInitCamera: Swift.Bool, isDisableSecurity: Swift.Bool, stepVerification: [Swift.String], outerBackgroundColorFaceTec: Swift.String, frameColorFaceTec: Swift.String, borderColorFaceTec: Swift.String, ovalColorFaceTec: Swift.String, dualSpinnerColorFaceTec: Swift.String, textColorFaceTec: Swift.String, buttonAndFeedbackBarColorFaceTec: Swift.String, buttonAndFeedbackBarTextColorFaceTec: Swift.String, buttonColorPressedFaceTec: Swift.String)
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : TrueIDSDK.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationPublicKeyInfo : TrueIDSDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MRZTD1) open class MRZTD1 : TrueIDSDK.MRZParser {
  @objc public var documentType: Swift.String
  @objc public var documentSubType: Swift.String
  @objc public var countryCode: Swift.String
  @objc public var passportNumber: Swift.String
  @objc public var dateOfBirth: Foundation.Date?
  @objc public var sex: Swift.String
  @objc public var expirationDate: Foundation.Date?
  @objc public var nationality: Swift.String
  @objc public var lastName: Swift.String
  @objc public var firstName: Swift.String
  @objc override public func data() -> Swift.Dictionary<Swift.String, Any>
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override public init(scan: Swift.String, debug: Swift.Bool = false)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup14 : TrueIDSDK.DataGroup {
  public var securityInfos: [TrueIDSDK.SecurityInfo] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DetailAddress : ObjectiveC.NSObject {
  @objc public var code: Swift.String
  @objc public var value: Swift.String
  @objc public func toMap() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Person : ObjectiveC.NSObject {
  @objc public var idNumber: Swift.String
  @objc public var gender: Swift.String
  @objc public var dob: Swift.String
  @objc public var fullname: Swift.String
  @objc public var address: Swift.String
  @objc public var doi: Swift.String
  @objc public var givenPlace: Swift.String
  @objc public var origin: Swift.String
  @objc public var dueDate: Swift.String
  @objc public var idType: Swift.String
  @objc public var qrcode: Swift.String
  @objc public var idTypeCode: Swift.Int
  @objc public var idOriginProvince: TrueIDSDK.DetailAddress
  @objc public var idOriginDistrict: TrueIDSDK.DetailAddress
  @objc public var idOriginWard: TrueIDSDK.DetailAddress
  @objc public var idAddressProvince: TrueIDSDK.DetailAddress
  @objc public var idAddressDistrict: TrueIDSDK.DetailAddress
  @objc public var idAddressWard: TrueIDSDK.DetailAddress
  @objc override dynamic public init()
  public init(idNumber: Swift.String, gender: Swift.String, dob: Swift.String, fullname: Swift.String, address: Swift.String, doi: Swift.String, givenPlace: Swift.String, origin: Swift.String, dueDate: Swift.String)
  public func toMap() -> [Swift.String : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : TrueIDSDK.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(TrueIDSDK.DataGroupId, Swift.Int)
  case error(TrueIDSDK.NFCPassportReaderError)
  case successfulRead
}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : TrueIDSDK.DataGroup {
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ActiveAuthenticationInfo : TrueIDSDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getSignatureAlgorithmOIDString() -> Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ASSpinnerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var layer: QuartzCore.CAShapeLayer {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var spinnerLineWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var spinnerStrokeColor: CoreGraphics.CGColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var spinnerDuration: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: TrueIDSDK.CertificateType, b: TrueIDSDK.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [TrueIDSDK.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: TrueIDSDK.DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public var base64String: Foundation.NSString
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MRZTD3) open class MRZTD3 : TrueIDSDK.MRZParser {
  @objc public var documentType: Swift.String
  @objc public var documentSubType: Swift.String
  @objc public var countryCode: Swift.String
  @objc public var lastName: Swift.String
  @objc public var firstName: Swift.String
  @objc public var passportNumber: Swift.String
  @objc public var nationality: Swift.String
  @objc public var dateOfBirth: Foundation.Date?
  @objc public var sex: Swift.String
  @objc public var expirationDate: Foundation.Date?
  @objc public var personalNumber: Swift.String
  @objc override public func data() -> Swift.Dictionary<Swift.String, Any>
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override public init(scan: Swift.String, debug: Swift.Bool = false)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : TrueIDSDK.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : TrueIDSDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@objc public enum typeProcessCheck : ObjectiveC.NSInteger {
  case ocr = 0
  case facematching = 1
  case liveness = 2
  case finished = 3
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc public enum LivenessDetectionMode : ObjectiveC.NSInteger {
  case none = 0
  case active = 1
  case passLiveness = 2
  case passive = 3
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
public enum MRZType : Swift.Int {
  case auto
  case td1
  case td3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: TrueIDSDK.PassportAuthenticationStatus, b: TrueIDSDK.PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NFCPassportModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var residenceAddress: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var documentSigningCertificate: TrueIDSDK.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: TrueIDSDK.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [TrueIDSDK.DataGroupId] {
    get
  }
  public var dataGroupsRead: [TrueIDSDK.DataGroupId : TrueIDSDK.DataGroup]
  public var dataGroupHashes: [TrueIDSDK.DataGroupId : TrueIDSDK.DataGroupHash] {
    get
  }
  public var cardAccess: TrueIDSDK.CardAccess? {
    get
  }
  public var BACStatus: TrueIDSDK.PassportAuthenticationStatus {
    get
  }
  public var PACEStatus: TrueIDSDK.PassportAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: TrueIDSDK.PassportAuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [any Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: TrueIDSDK.DataGroupId, dataGroup: TrueIDSDK.DataGroup)
  public func getDataGroup(_ id: TrueIDSDK.DataGroupId) -> TrueIDSDK.DataGroup?
  public func dumpPassportData(selectedDataGroups: [TrueIDSDK.DataGroupId], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [TrueIDSDK.DataGroupId : [Swift.UInt8]]
  public func verifyPassport(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: TrueIDSDK.SecureMessagingSupportedAlgorithms, b: TrueIDSDK.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: TrueIDSDK.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [TrueIDSDK.SecurityInfo] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> TrueIDSDK.DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [TrueIDSDK.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [TrueIDSDK.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
public struct CitizenInfo {
}
extension TrueIDSDK.CitizenInfo {
  public static func parse(from string: Swift.String) -> TrueIDSDK.CitizenInfo?
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case UnsupportedCipherAlgorithm
  case UnsupportedMappingType
  case PACEError(Swift.String, Swift.String)
  case ChipAuthenticationFailed
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension TrueIDSDK.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: TrueIDSDK.TagReader)
  #if compiler(>=5.3) && $AsyncAwait
  public func performBACAndGetSessionKeys(mrzKey: Swift.String) async throws
  #endif
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public init(logLevel: TrueIDSDK.LogLevel = .info, masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  #if compiler(>=5.3) && $AsyncAwait
  public func readPassport(mrzKey: Swift.String, tags: [TrueIDSDK.DataGroupId] = [], skipSecureElements: Swift.Bool = true, skipCA: Swift.Bool = false, skipPACE: Swift.Bool = false, customDisplayMessage: ((TrueIDSDK.NFCViewDisplayMessage) -> Swift.String?)? = nil) async throws -> TrueIDSDK.NFCPassportModel
  #endif
  @objc deinit
}
@available(iOS 13, *)
extension TrueIDSDK.PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : TrueIDSDK.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
public typealias TrueIDListener = (_ cardInfo: TrueIDSDK.VerificationResult) -> ()
@_inheritsConvenienceInitializers @objc public class TrueID : ObjectiveC.NSObject {
  public static var personEdit: TrueIDSDK.Person!
  public static var idType: Swift.String
  public static var idCode: Swift.Int
  public static var card: TrueIDSDK.CardInfo
  public static var initCamera: Swift.Bool
  public static var verificationResult: TrueIDSDK.VerificationResult
  public static var nfcStatus: TrueIDSDK.NFCStatus
  public static var indexIntroNFC: Swift.Int
  public static var isStartSDK: Swift.Bool
  public static var citizenInfo: TrueIDSDK.CitizenInfo
  @objc public static func configure(configInfo: TrueIDSDK.ConfigInfo, configUI: TrueIDSDK.ConfigUI)
  @objc public static func start(listener: @escaping TrueIDSDK.TrueIDListener)
  @objc public static func requestId() -> Swift.String
  @objc public static func accessToken() -> Swift.String
  @objc public static func getRetryCounter() -> Swift.Int
  @objc public static func setLanguage(language: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIFont {
  public enum FontType : Swift.String {
    case extraboldItalic
    case semiboldItalic
    case semibold
    case regular
    case lightItalic
    case light
    case italic
    case extraBold
    case boldItalic
    case bold
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension UIKit.UIDevice {
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func zmDeviceUUID() -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func getFirstStart() -> Swift.String
  @_Concurrency.MainActor(unsafe) public var identifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func currentAppVersion() -> Swift.String
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
@objc public enum DetectionType : Swift.Int {
  case ocrScan = 0
  case livenessDetection = 1
  case faceComparision = 2
  case idVerification = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class CardInfo : ObjectiveC.NSObject {
  @objc public var person: TrueIDSDK.Person?
  @objc public var frontCardImage: UIKit.UIImage?
  @objc public var backCardImage: UIKit.UIImage?
  @objc public var result: [Swift.String : Any]?
  @objc public func getRecord(type: TrueIDSDK.DetectionType) -> TrueIDSDK.CheckingRecord?
  @objc public func toMap() -> [Swift.String : Any]
  @objc deinit
}
extension TrueIDSDK.LogLevel : Swift.Equatable {}
extension TrueIDSDK.LogLevel : Swift.Hashable {}
extension TrueIDSDK.LogLevel : Swift.RawRepresentable {}
extension TrueIDSDK.PACEMappingType : Swift.Equatable {}
extension TrueIDSDK.PACEMappingType : Swift.Hashable {}
extension TrueIDSDK.NFCStatus : Swift.Equatable {}
extension TrueIDSDK.NFCStatus : Swift.Hashable {}
extension TrueIDSDK.NFCStatus : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.DocTypeEnum : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.CertificateType : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.CertificateType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.CertificateItem : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.CertificateItem : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.CertificateItem : Swift.RawRepresentable {}
extension TrueIDSDK.typeProcessCheck : Swift.Equatable {}
extension TrueIDSDK.typeProcessCheck : Swift.Hashable {}
extension TrueIDSDK.typeProcessCheck : Swift.RawRepresentable {}
extension TrueIDSDK.LivenessDetectionMode : Swift.Equatable {}
extension TrueIDSDK.LivenessDetectionMode : Swift.Hashable {}
extension TrueIDSDK.LivenessDetectionMode : Swift.RawRepresentable {}
extension TrueIDSDK.MRZType : Swift.Equatable {}
extension TrueIDSDK.MRZType : Swift.Hashable {}
extension TrueIDSDK.MRZType : Swift.RawRepresentable {}
extension TrueIDSDK.PassportAuthenticationStatus : Swift.Equatable {}
extension TrueIDSDK.PassportAuthenticationStatus : Swift.Hashable {}
extension TrueIDSDK.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension TrueIDSDK.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension TrueIDSDK.DataGroupId : Swift.RawRepresentable {}
extension UIKit.UIFont.FontType : Swift.Equatable {}
extension UIKit.UIFont.FontType : Swift.Hashable {}
extension UIKit.UIFont.FontType : Swift.RawRepresentable {}
extension TrueIDSDK.DetectionType : Swift.Equatable {}
extension TrueIDSDK.DetectionType : Swift.Hashable {}
extension TrueIDSDK.DetectionType : Swift.RawRepresentable {}
